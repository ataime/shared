// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.26.1
// source: proto/admin.proto

// 在protobuf/pbadmin目录:
// protoc --go_out=. --go-grpc_out=. censor.proto
// protoc --go_out=. --go-grpc_out=. *.proto

package censor

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 审核阶段
type CensorStage int32

const (
	CensorStage_UNREVIEWED CensorStage = 0 // 未审核
	CensorStage_MACHINE    CensorStage = 1 // 机器审核
	CensorStage_HUMAN      CensorStage = 2 // 人工审核
	CensorStage_SECONDARY  CensorStage = 3 // 多次审核
)

// Enum value maps for CensorStage.
var (
	CensorStage_name = map[int32]string{
		0: "UNREVIEWED",
		1: "MACHINE",
		2: "HUMAN",
		3: "SECONDARY",
	}
	CensorStage_value = map[string]int32{
		"UNREVIEWED": 0,
		"MACHINE":    1,
		"HUMAN":      2,
		"SECONDARY":  3,
	}
)

func (x CensorStage) Enum() *CensorStage {
	p := new(CensorStage)
	*p = x
	return p
}

func (x CensorStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CensorStage) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_admin_proto_enumTypes[0].Descriptor()
}

func (CensorStage) Type() protoreflect.EnumType {
	return &file_proto_admin_proto_enumTypes[0]
}

func (x CensorStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CensorStage.Descriptor instead.
func (CensorStage) EnumDescriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{0}
}

// 审核状态
type CensorStatus int32

const (
	CensorStatus_PENDING  CensorStatus = 0
	CensorStatus_APPROVED CensorStatus = 1
	CensorStatus_REJECTED CensorStatus = 2
	CensorStatus_FLAGGED  CensorStatus = 3 // 标记为需要进一步审核
)

// Enum value maps for CensorStatus.
var (
	CensorStatus_name = map[int32]string{
		0: "PENDING",
		1: "APPROVED",
		2: "REJECTED",
		3: "FLAGGED",
	}
	CensorStatus_value = map[string]int32{
		"PENDING":  0,
		"APPROVED": 1,
		"REJECTED": 2,
		"FLAGGED":  3,
	}
)

func (x CensorStatus) Enum() *CensorStatus {
	p := new(CensorStatus)
	*p = x
	return p
}

func (x CensorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CensorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_admin_proto_enumTypes[1].Descriptor()
}

func (CensorStatus) Type() protoreflect.EnumType {
	return &file_proto_admin_proto_enumTypes[1]
}

func (x CensorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CensorStatus.Descriptor instead.
func (CensorStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{1}
}

// Define Gender enum
type Gender int32

const (
	Gender_UNKNOWN Gender = 0
	Gender_MALE    Gender = 1
	Gender_FEMALE  Gender = 2
	Gender_OTHER   Gender = 3
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "UNKNOWN",
		1: "MALE",
		2: "FEMALE",
		3: "OTHER",
	}
	Gender_value = map[string]int32{
		"UNKNOWN": 0,
		"MALE":    1,
		"FEMALE":  2,
		"OTHER":   3,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_admin_proto_enumTypes[2].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_proto_admin_proto_enumTypes[2]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{2}
}

// Define UserField enum
type UserField int32

const (
	UserField_USER_FIELD_UNKNOWN   UserField = 0 // 占位符值(生成的json，0值会被 omitempty)
	UserField_USER_FIELD_AVATAR    UserField = 1
	UserField_USER_FIELD_PROFILE   UserField = 2
	UserField_USER_FIELD_QUOTE     UserField = 3 // 签名
	UserField_USER_FIELD_REAL_NAME UserField = 4 // 真实姓名
	UserField_USER_FIELD_VOCATION  UserField = 5 // 职业
	UserField_USER_FIELD_NICKNAME  UserField = 6
	UserField_USER_FIELD_CONSULT   UserField = 7 // 咨询介绍
)

// Enum value maps for UserField.
var (
	UserField_name = map[int32]string{
		0: "USER_FIELD_UNKNOWN",
		1: "USER_FIELD_AVATAR",
		2: "USER_FIELD_PROFILE",
		3: "USER_FIELD_QUOTE",
		4: "USER_FIELD_REAL_NAME",
		5: "USER_FIELD_VOCATION",
		6: "USER_FIELD_NICKNAME",
		7: "USER_FIELD_CONSULT",
	}
	UserField_value = map[string]int32{
		"USER_FIELD_UNKNOWN":   0,
		"USER_FIELD_AVATAR":    1,
		"USER_FIELD_PROFILE":   2,
		"USER_FIELD_QUOTE":     3,
		"USER_FIELD_REAL_NAME": 4,
		"USER_FIELD_VOCATION":  5,
		"USER_FIELD_NICKNAME":  6,
		"USER_FIELD_CONSULT":   7,
	}
)

func (x UserField) Enum() *UserField {
	p := new(UserField)
	*p = x
	return p
}

func (x UserField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserField) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_admin_proto_enumTypes[3].Descriptor()
}

func (UserField) Type() protoreflect.EnumType {
	return &file_proto_admin_proto_enumTypes[3]
}

func (x UserField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserField.Descriptor instead.
func (UserField) EnumDescriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{3}
}

// Define UserTagCategory enum
type UserTagCategory int32

const (
	UserTagCategory_CATEGORY_UNKNOWN UserTagCategory = 0
	UserTagCategory_SCHOOL           UserTagCategory = 1
	UserTagCategory_MAJOR            UserTagCategory = 2
	UserTagCategory_CITY             UserTagCategory = 3
	UserTagCategory_VOCATION         UserTagCategory = 4
)

// Enum value maps for UserTagCategory.
var (
	UserTagCategory_name = map[int32]string{
		0: "CATEGORY_UNKNOWN",
		1: "SCHOOL",
		2: "MAJOR",
		3: "CITY",
		4: "VOCATION",
	}
	UserTagCategory_value = map[string]int32{
		"CATEGORY_UNKNOWN": 0,
		"SCHOOL":           1,
		"MAJOR":            2,
		"CITY":             3,
		"VOCATION":         4,
	}
)

func (x UserTagCategory) Enum() *UserTagCategory {
	p := new(UserTagCategory)
	*p = x
	return p
}

func (x UserTagCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserTagCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_admin_proto_enumTypes[4].Descriptor()
}

func (UserTagCategory) Type() protoreflect.EnumType {
	return &file_proto_admin_proto_enumTypes[4]
}

func (x UserTagCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserTagCategory.Descriptor instead.
func (UserTagCategory) EnumDescriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{4}
}

type FeedbackCategory int32

const (
	FeedbackCategory_OTHER1     FeedbackCategory = 0
	FeedbackCategory_SUGGESTION FeedbackCategory = 1
	FeedbackCategory_COMPLAINT  FeedbackCategory = 2
	FeedbackCategory_BUG        FeedbackCategory = 3
)

// Enum value maps for FeedbackCategory.
var (
	FeedbackCategory_name = map[int32]string{
		0: "OTHER1",
		1: "SUGGESTION",
		2: "COMPLAINT",
		3: "BUG",
	}
	FeedbackCategory_value = map[string]int32{
		"OTHER1":     0,
		"SUGGESTION": 1,
		"COMPLAINT":  2,
		"BUG":        3,
	}
)

func (x FeedbackCategory) Enum() *FeedbackCategory {
	p := new(FeedbackCategory)
	*p = x
	return p
}

func (x FeedbackCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedbackCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_admin_proto_enumTypes[5].Descriptor()
}

func (FeedbackCategory) Type() protoreflect.EnumType {
	return &file_proto_admin_proto_enumTypes[5]
}

func (x FeedbackCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeedbackCategory.Descriptor instead.
func (FeedbackCategory) EnumDescriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{5}
}

type FeedbackStatus int32

const (
	FeedbackStatus_PROCESSING FeedbackStatus = 0
	FeedbackStatus_RECEIVED   FeedbackStatus = 1
	FeedbackStatus_RESOLVED   FeedbackStatus = 2
	FeedbackStatus_DISMISSED  FeedbackStatus = 3
)

// Enum value maps for FeedbackStatus.
var (
	FeedbackStatus_name = map[int32]string{
		0: "PROCESSING",
		1: "RECEIVED",
		2: "RESOLVED",
		3: "DISMISSED",
	}
	FeedbackStatus_value = map[string]int32{
		"PROCESSING": 0,
		"RECEIVED":   1,
		"RESOLVED":   2,
		"DISMISSED":  3,
	}
)

func (x FeedbackStatus) Enum() *FeedbackStatus {
	p := new(FeedbackStatus)
	*p = x
	return p
}

func (x FeedbackStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedbackStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_admin_proto_enumTypes[6].Descriptor()
}

func (FeedbackStatus) Type() protoreflect.EnumType {
	return &file_proto_admin_proto_enumTypes[6]
}

func (x FeedbackStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeedbackStatus.Descriptor instead.
func (FeedbackStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{6}
}

type ComplaintType int32

const (
	ComplaintType_OTHER2       ComplaintType = 0  // 其他
	ComplaintType_SPAM         ComplaintType = 1  // 垃圾信息
	ComplaintType_ABUSE        ComplaintType = 2  // 侮辱性语言
	ComplaintType_PORN         ComplaintType = 3  // 色情内容
	ComplaintType_INFRINGEMENT ComplaintType = 4  // 侵犯权益
	ComplaintType_CRIME        ComplaintType = 6  // 违法犯罪
	ComplaintType_SENSITIVE    ComplaintType = 7  // 政治敏感
	ComplaintType_MARKETING    ComplaintType = 8  // 违规营销
	ComplaintType_MISINFO      ComplaintType = 9  // 不实信息
	ComplaintType_ENDANGER     ComplaintType = 10 // 危害人生安全
	ComplaintType_MINOR        ComplaintType = 11 // 未成年相关
	ComplaintType_AI           ComplaintType = 12 // AI生成内容
	ComplaintType_ABNORMAL     ComplaintType = 13 // 不规范表达
	ComplaintType_PHISHING     ComplaintType = 14 // 诈骗
	ComplaintType_EXTERNAL     ComplaintType = 15 // 站外导流
	ComplaintType_UNFRIENDLY   ComplaintType = 16 // 不友善
	ComplaintType_INDECENT     ComplaintType = 17 // 诱导欺骗
	ComplaintType_VIOLENCE     ComplaintType = 18 // 网络暴力
	ComplaintType_SUICIDE      ComplaintType = 19 // 疑似自残
	ComplaintType_HATE         ComplaintType = 20 // 我不喜欢
)

// Enum value maps for ComplaintType.
var (
	ComplaintType_name = map[int32]string{
		0:  "OTHER2",
		1:  "SPAM",
		2:  "ABUSE",
		3:  "PORN",
		4:  "INFRINGEMENT",
		6:  "CRIME",
		7:  "SENSITIVE",
		8:  "MARKETING",
		9:  "MISINFO",
		10: "ENDANGER",
		11: "MINOR",
		12: "AI",
		13: "ABNORMAL",
		14: "PHISHING",
		15: "EXTERNAL",
		16: "UNFRIENDLY",
		17: "INDECENT",
		18: "VIOLENCE",
		19: "SUICIDE",
		20: "HATE",
	}
	ComplaintType_value = map[string]int32{
		"OTHER2":       0,
		"SPAM":         1,
		"ABUSE":        2,
		"PORN":         3,
		"INFRINGEMENT": 4,
		"CRIME":        6,
		"SENSITIVE":    7,
		"MARKETING":    8,
		"MISINFO":      9,
		"ENDANGER":     10,
		"MINOR":        11,
		"AI":           12,
		"ABNORMAL":     13,
		"PHISHING":     14,
		"EXTERNAL":     15,
		"UNFRIENDLY":   16,
		"INDECENT":     17,
		"VIOLENCE":     18,
		"SUICIDE":      19,
		"HATE":         20,
	}
)

func (x ComplaintType) Enum() *ComplaintType {
	p := new(ComplaintType)
	*p = x
	return p
}

func (x ComplaintType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComplaintType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_admin_proto_enumTypes[7].Descriptor()
}

func (ComplaintType) Type() protoreflect.EnumType {
	return &file_proto_admin_proto_enumTypes[7]
}

func (x ComplaintType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComplaintType.Descriptor instead.
func (ComplaintType) EnumDescriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{7}
}

// Define TargetItem message (if needed)
type TargetItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TargetItem) Reset() {
	*x = TargetItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetItem) ProtoMessage() {}

func (x *TargetItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetItem.ProtoReflect.Descriptor instead.
func (*TargetItem) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{0}
}

func (x *TargetItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TargetItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// 测试请求
type TestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"` // 用户ID
}

func (x *TestRequest) Reset() {
	*x = TestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRequest) ProtoMessage() {}

func (x *TestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRequest.ProtoReflect.Descriptor instead.
func (*TestRequest) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{1}
}

func (x *TestRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 测试响应
type TestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // 语贴ID
}

func (x *TestResponse) Reset() {
	*x = TestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResponse) ProtoMessage() {}

func (x *TestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResponse.ProtoReflect.Descriptor instead.
func (*TestResponse) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{2}
}

func (x *TestResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// 用户详情
type UserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"` // 用户ID
}

func (x *UserRequest) Reset() {
	*x = UserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRequest) ProtoMessage() {}

func (x *UserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRequest.ProtoReflect.Descriptor instead.
func (*UserRequest) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{3}
}

func (x *UserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 用户详情响应
type UserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AnonId          string                 `protobuf:"bytes,2,opt,name=anon_id,json=anonId,proto3" json:"anon_id,omitempty"`
	CustomId        string                 `protobuf:"bytes,3,opt,name=custom_id,json=customId,proto3" json:"custom_id,omitempty"`
	CustomIdLcase   string                 `protobuf:"bytes,4,opt,name=custom_id_lcase,json=customIdLcase,proto3" json:"custom_id_lcase,omitempty"`
	CustomIdTime    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=custom_id_time,json=customIdTime,proto3" json:"custom_id_time,omitempty"`
	Unionid         string                 `protobuf:"bytes,6,opt,name=unionid,proto3" json:"unionid,omitempty"`
	OpenId          string                 `protobuf:"bytes,7,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	AppId           string                 `protobuf:"bytes,8,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	PhoneEncryption string                 `protobuf:"bytes,9,opt,name=phone_encryption,json=phoneEncryption,proto3" json:"phone_encryption,omitempty"`
	PhonePartial    string                 `protobuf:"bytes,10,opt,name=phone_partial,json=phonePartial,proto3" json:"phone_partial,omitempty"`
	PhoneHash       string                 `protobuf:"bytes,11,opt,name=phone_hash,json=phoneHash,proto3" json:"phone_hash,omitempty"`
	PhoneVerified   bool                   `protobuf:"varint,12,opt,name=phone_verified,json=phoneVerified,proto3" json:"phone_verified,omitempty"`
	Nickname        string                 `protobuf:"bytes,13,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Realname        string                 `protobuf:"bytes,14,opt,name=realname,proto3" json:"realname,omitempty"`
	RealnameHidden  bool                   `protobuf:"varint,15,opt,name=realname_hidden,json=realnameHidden,proto3" json:"realname_hidden,omitempty"`
	Gender          Gender                 `protobuf:"varint,16,opt,name=gender,proto3,enum=censor.Gender" json:"gender,omitempty"`
	GenderHidden    bool                   `protobuf:"varint,17,opt,name=gender_hidden,json=genderHidden,proto3" json:"gender_hidden,omitempty"`
	BirthYear       int32                  `protobuf:"varint,18,opt,name=birth_year,json=birthYear,proto3" json:"birth_year,omitempty"`
	BirthMonth      int32                  `protobuf:"varint,19,opt,name=birth_month,json=birthMonth,proto3" json:"birth_month,omitempty"`
	BirthHidden     bool                   `protobuf:"varint,20,opt,name=birth_hidden,json=birthHidden,proto3" json:"birth_hidden,omitempty"`
	Avatar          string                 `protobuf:"bytes,21,opt,name=avatar,proto3" json:"avatar,omitempty"`
	LastLoginTime   *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"`
	UserHidden      bool                   `protobuf:"varint,23,opt,name=user_hidden,json=userHidden,proto3" json:"user_hidden,omitempty"`
	IsDeactivated   bool                   `protobuf:"varint,24,opt,name=is_deactivated,json=isDeactivated,proto3" json:"is_deactivated,omitempty"`
	DeactivatedAt   *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=deactivated_at,json=deactivatedAt,proto3" json:"deactivated_at,omitempty"`
	Quote           string                 `protobuf:"bytes,26,opt,name=quote,proto3" json:"quote,omitempty"`
	UserProfile     string                 `protobuf:"bytes,27,opt,name=user_profile,json=userProfile,proto3" json:"user_profile,omitempty"`
	CensorStatus    CensorStatus           `protobuf:"varint,28,opt,name=censor_status,json=censorStatus,proto3,enum=censor.CensorStatus" json:"censor_status,omitempty"`
	Censorsum       string                 `protobuf:"bytes,29,opt,name=censorsum,proto3" json:"censorsum,omitempty"`
}

func (x *UserResponse) Reset() {
	*x = UserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserResponse) ProtoMessage() {}

func (x *UserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserResponse.ProtoReflect.Descriptor instead.
func (*UserResponse) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{4}
}

func (x *UserResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserResponse) GetAnonId() string {
	if x != nil {
		return x.AnonId
	}
	return ""
}

func (x *UserResponse) GetCustomId() string {
	if x != nil {
		return x.CustomId
	}
	return ""
}

func (x *UserResponse) GetCustomIdLcase() string {
	if x != nil {
		return x.CustomIdLcase
	}
	return ""
}

func (x *UserResponse) GetCustomIdTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CustomIdTime
	}
	return nil
}

func (x *UserResponse) GetUnionid() string {
	if x != nil {
		return x.Unionid
	}
	return ""
}

func (x *UserResponse) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *UserResponse) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *UserResponse) GetPhoneEncryption() string {
	if x != nil {
		return x.PhoneEncryption
	}
	return ""
}

func (x *UserResponse) GetPhonePartial() string {
	if x != nil {
		return x.PhonePartial
	}
	return ""
}

func (x *UserResponse) GetPhoneHash() string {
	if x != nil {
		return x.PhoneHash
	}
	return ""
}

func (x *UserResponse) GetPhoneVerified() bool {
	if x != nil {
		return x.PhoneVerified
	}
	return false
}

func (x *UserResponse) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserResponse) GetRealname() string {
	if x != nil {
		return x.Realname
	}
	return ""
}

func (x *UserResponse) GetRealnameHidden() bool {
	if x != nil {
		return x.RealnameHidden
	}
	return false
}

func (x *UserResponse) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_UNKNOWN
}

func (x *UserResponse) GetGenderHidden() bool {
	if x != nil {
		return x.GenderHidden
	}
	return false
}

func (x *UserResponse) GetBirthYear() int32 {
	if x != nil {
		return x.BirthYear
	}
	return 0
}

func (x *UserResponse) GetBirthMonth() int32 {
	if x != nil {
		return x.BirthMonth
	}
	return 0
}

func (x *UserResponse) GetBirthHidden() bool {
	if x != nil {
		return x.BirthHidden
	}
	return false
}

func (x *UserResponse) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserResponse) GetLastLoginTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastLoginTime
	}
	return nil
}

func (x *UserResponse) GetUserHidden() bool {
	if x != nil {
		return x.UserHidden
	}
	return false
}

func (x *UserResponse) GetIsDeactivated() bool {
	if x != nil {
		return x.IsDeactivated
	}
	return false
}

func (x *UserResponse) GetDeactivatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeactivatedAt
	}
	return nil
}

func (x *UserResponse) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *UserResponse) GetUserProfile() string {
	if x != nil {
		return x.UserProfile
	}
	return ""
}

func (x *UserResponse) GetCensorStatus() CensorStatus {
	if x != nil {
		return x.CensorStatus
	}
	return CensorStatus_PENDING
}

func (x *UserResponse) GetCensorsum() string {
	if x != nil {
		return x.Censorsum
	}
	return ""
}

// 语贴详情
type YutapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YutapId string `protobuf:"bytes,1,opt,name=yutapId,proto3" json:"yutapId,omitempty"` // 语贴ID
}

func (x *YutapRequest) Reset() {
	*x = YutapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YutapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YutapRequest) ProtoMessage() {}

func (x *YutapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YutapRequest.ProtoReflect.Descriptor instead.
func (*YutapRequest) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{5}
}

func (x *YutapRequest) GetYutapId() string {
	if x != nil {
		return x.YutapId
	}
	return ""
}

// 语贴详情响应
type YutapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YutapId      string                 `protobuf:"bytes,1,opt,name=yutap_id,json=yutapId,proto3" json:"yutap_id,omitempty"`
	Title        string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Text         string                 `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	IsTop        bool                   `protobuf:"varint,4,opt,name=is_top,json=isTop,proto3" json:"is_top,omitempty"`
	UserId       string                 `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Mentions     []string               `protobuf:"bytes,6,rep,name=mentions,proto3" json:"mentions,omitempty"`
	IsAnon       bool                   `protobuf:"varint,7,opt,name=is_anon,json=isAnon,proto3" json:"is_anon,omitempty"`
	AnonName     string                 `protobuf:"bytes,8,opt,name=anon_name,json=anonName,proto3" json:"anon_name,omitempty"`
	AnonAvatar   string                 `protobuf:"bytes,9,opt,name=anon_avatar,json=anonAvatar,proto3" json:"anon_avatar,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CensorStatus CensorStatus           `protobuf:"varint,12,opt,name=censor_status,json=censorStatus,proto3,enum=censor.CensorStatus" json:"censor_status,omitempty"`
	Topics       []string               `protobuf:"bytes,13,rep,name=topics,proto3" json:"topics,omitempty"`
	IsTargeted   bool                   `protobuf:"varint,14,opt,name=is_targeted,json=isTargeted,proto3" json:"is_targeted,omitempty"`
	Targets      []*TargetItem          `protobuf:"bytes,15,rep,name=targets,proto3" json:"targets,omitempty"`
	Ip           string                 `protobuf:"bytes,16,opt,name=ip,proto3" json:"ip,omitempty"`
	DeviceInfo   string                 `protobuf:"bytes,17,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
	IsDeleted    bool                   `protobuf:"varint,18,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	DeletedAt    *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	IsHidden     bool                   `protobuf:"varint,20,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"`
	Longitude    float64                `protobuf:"fixed64,21,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude     float64                `protobuf:"fixed64,22,opt,name=latitude,proto3" json:"latitude,omitempty"`
	City         string                 `protobuf:"bytes,23,opt,name=city,proto3" json:"city,omitempty"`
	Censorsum    string                 `protobuf:"bytes,24,opt,name=censorsum,proto3" json:"censorsum,omitempty"`
}

func (x *YutapResponse) Reset() {
	*x = YutapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YutapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YutapResponse) ProtoMessage() {}

func (x *YutapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YutapResponse.ProtoReflect.Descriptor instead.
func (*YutapResponse) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{6}
}

func (x *YutapResponse) GetYutapId() string {
	if x != nil {
		return x.YutapId
	}
	return ""
}

func (x *YutapResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *YutapResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *YutapResponse) GetIsTop() bool {
	if x != nil {
		return x.IsTop
	}
	return false
}

func (x *YutapResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *YutapResponse) GetMentions() []string {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *YutapResponse) GetIsAnon() bool {
	if x != nil {
		return x.IsAnon
	}
	return false
}

func (x *YutapResponse) GetAnonName() string {
	if x != nil {
		return x.AnonName
	}
	return ""
}

func (x *YutapResponse) GetAnonAvatar() string {
	if x != nil {
		return x.AnonAvatar
	}
	return ""
}

func (x *YutapResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *YutapResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *YutapResponse) GetCensorStatus() CensorStatus {
	if x != nil {
		return x.CensorStatus
	}
	return CensorStatus_PENDING
}

func (x *YutapResponse) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *YutapResponse) GetIsTargeted() bool {
	if x != nil {
		return x.IsTargeted
	}
	return false
}

func (x *YutapResponse) GetTargets() []*TargetItem {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *YutapResponse) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *YutapResponse) GetDeviceInfo() string {
	if x != nil {
		return x.DeviceInfo
	}
	return ""
}

func (x *YutapResponse) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *YutapResponse) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *YutapResponse) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

func (x *YutapResponse) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *YutapResponse) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *YutapResponse) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *YutapResponse) GetCensorsum() string {
	if x != nil {
		return x.Censorsum
	}
	return ""
}

// 评论详情
type CommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId string `protobuf:"bytes,1,opt,name=commentId,proto3" json:"commentId,omitempty"` // 评论ID
}

func (x *CommentRequest) Reset() {
	*x = CommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentRequest) ProtoMessage() {}

func (x *CommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentRequest.ProtoReflect.Descriptor instead.
func (*CommentRequest) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{7}
}

func (x *CommentRequest) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

// 评论详情响应
type CommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId    string                 `protobuf:"bytes,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	YutapId      string                 `protobuf:"bytes,2,opt,name=yutap_id,json=yutapId,proto3" json:"yutap_id,omitempty"`
	RelateId     string                 `protobuf:"bytes,3,opt,name=relate_id,json=relateId,proto3" json:"relate_id,omitempty"`
	ReplyTo      string                 `protobuf:"bytes,4,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	UserId       string                 `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsAnon       bool                   `protobuf:"varint,6,opt,name=is_anon,json=isAnon,proto3" json:"is_anon,omitempty"`
	AnonName     string                 `protobuf:"bytes,7,opt,name=anon_name,json=anonName,proto3" json:"anon_name,omitempty"`
	AnonAvatar   string                 `protobuf:"bytes,8,opt,name=anon_avatar,json=anonAvatar,proto3" json:"anon_avatar,omitempty"`
	Content      string                 `protobuf:"bytes,9,opt,name=content,proto3" json:"content,omitempty"`
	Images       []string               `protobuf:"bytes,10,rep,name=images,proto3" json:"images,omitempty"`
	Mentions     []string               `protobuf:"bytes,11,rep,name=mentions,proto3" json:"mentions,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CensorStatus CensorStatus           `protobuf:"varint,13,opt,name=censor_status,json=censorStatus,proto3,enum=censor.CensorStatus" json:"censor_status,omitempty"`
	IsDeleted    bool                   `protobuf:"varint,14,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	DeletedAt    *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	Ip           string                 `protobuf:"bytes,16,opt,name=ip,proto3" json:"ip,omitempty"`
	DeviceInfo   string                 `protobuf:"bytes,17,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
	Longitude    float64                `protobuf:"fixed64,18,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude     float64                `protobuf:"fixed64,19,opt,name=latitude,proto3" json:"latitude,omitempty"`
	City         string                 `protobuf:"bytes,20,opt,name=city,proto3" json:"city,omitempty"`
	Censorsum    string                 `protobuf:"bytes,21,opt,name=censorsum,proto3" json:"censorsum,omitempty"`
}

func (x *CommentResponse) Reset() {
	*x = CommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentResponse) ProtoMessage() {}

func (x *CommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentResponse.ProtoReflect.Descriptor instead.
func (*CommentResponse) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{8}
}

func (x *CommentResponse) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

func (x *CommentResponse) GetYutapId() string {
	if x != nil {
		return x.YutapId
	}
	return ""
}

func (x *CommentResponse) GetRelateId() string {
	if x != nil {
		return x.RelateId
	}
	return ""
}

func (x *CommentResponse) GetReplyTo() string {
	if x != nil {
		return x.ReplyTo
	}
	return ""
}

func (x *CommentResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommentResponse) GetIsAnon() bool {
	if x != nil {
		return x.IsAnon
	}
	return false
}

func (x *CommentResponse) GetAnonName() string {
	if x != nil {
		return x.AnonName
	}
	return ""
}

func (x *CommentResponse) GetAnonAvatar() string {
	if x != nil {
		return x.AnonAvatar
	}
	return ""
}

func (x *CommentResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommentResponse) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *CommentResponse) GetMentions() []string {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *CommentResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CommentResponse) GetCensorStatus() CensorStatus {
	if x != nil {
		return x.CensorStatus
	}
	return CensorStatus_PENDING
}

func (x *CommentResponse) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *CommentResponse) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *CommentResponse) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *CommentResponse) GetDeviceInfo() string {
	if x != nil {
		return x.DeviceInfo
	}
	return ""
}

func (x *CommentResponse) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *CommentResponse) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *CommentResponse) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CommentResponse) GetCensorsum() string {
	if x != nil {
		return x.Censorsum
	}
	return ""
}

type UserModification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Nickname  string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	CustomId  string `protobuf:"bytes,3,opt,name=custom_id,json=customId,proto3" json:"custom_id,omitempty"`
	Realname  string `protobuf:"bytes,4,opt,name=realname,proto3" json:"realname,omitempty"`
	Gender    Gender `protobuf:"varint,5,opt,name=gender,proto3,enum=censor.Gender" json:"gender,omitempty"`
	BirthYear int32  `protobuf:"varint,6,opt,name=birth_year,json=birthYear,proto3" json:"birth_year,omitempty"`
}

func (x *UserModification) Reset() {
	*x = UserModification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserModification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserModification) ProtoMessage() {}

func (x *UserModification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserModification.ProtoReflect.Descriptor instead.
func (*UserModification) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{9}
}

func (x *UserModification) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserModification) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserModification) GetCustomId() string {
	if x != nil {
		return x.CustomId
	}
	return ""
}

func (x *UserModification) GetRealname() string {
	if x != nil {
		return x.Realname
	}
	return ""
}

func (x *UserModification) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_UNKNOWN
}

func (x *UserModification) GetBirthYear() int32 {
	if x != nil {
		return x.BirthYear
	}
	return 0
}

// 审核语贴请求
type CensorYutapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YutapId   string       `protobuf:"bytes,1,opt,name=yutapId,proto3" json:"yutapId,omitempty"`                         // 语贴ID
	Status    CensorStatus `protobuf:"varint,2,opt,name=status,proto3,enum=censor.CensorStatus" json:"status,omitempty"` // 审核状态
	Stage     CensorStage  `protobuf:"varint,3,opt,name=stage,proto3,enum=censor.CensorStage" json:"stage,omitempty"`    // 审核阶段
	Censorsum string       `protobuf:"bytes,4,opt,name=censorsum,proto3" json:"censorsum,omitempty"`
}

func (x *CensorYutapRequest) Reset() {
	*x = CensorYutapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CensorYutapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CensorYutapRequest) ProtoMessage() {}

func (x *CensorYutapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CensorYutapRequest.ProtoReflect.Descriptor instead.
func (*CensorYutapRequest) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{10}
}

func (x *CensorYutapRequest) GetYutapId() string {
	if x != nil {
		return x.YutapId
	}
	return ""
}

func (x *CensorYutapRequest) GetStatus() CensorStatus {
	if x != nil {
		return x.Status
	}
	return CensorStatus_PENDING
}

func (x *CensorYutapRequest) GetStage() CensorStage {
	if x != nil {
		return x.Stage
	}
	return CensorStage_UNREVIEWED
}

func (x *CensorYutapRequest) GetCensorsum() string {
	if x != nil {
		return x.Censorsum
	}
	return ""
}

// 审核语贴响应 (成功)
type CensorYutapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Err     string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *CensorYutapResponse) Reset() {
	*x = CensorYutapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CensorYutapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CensorYutapResponse) ProtoMessage() {}

func (x *CensorYutapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CensorYutapResponse.ProtoReflect.Descriptor instead.
func (*CensorYutapResponse) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{11}
}

func (x *CensorYutapResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CensorYutapResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

// 审核评论请求
type CensorCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId string       `protobuf:"bytes,1,opt,name=commentId,proto3" json:"commentId,omitempty"`                     // 评论ID
	Status    CensorStatus `protobuf:"varint,2,opt,name=status,proto3,enum=censor.CensorStatus" json:"status,omitempty"` // 审核状态
	Stage     CensorStage  `protobuf:"varint,3,opt,name=stage,proto3,enum=censor.CensorStage" json:"stage,omitempty"`    // 审核阶段
	Censorsum string       `protobuf:"bytes,4,opt,name=censorsum,proto3" json:"censorsum,omitempty"`
}

func (x *CensorCommentRequest) Reset() {
	*x = CensorCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CensorCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CensorCommentRequest) ProtoMessage() {}

func (x *CensorCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CensorCommentRequest.ProtoReflect.Descriptor instead.
func (*CensorCommentRequest) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{12}
}

func (x *CensorCommentRequest) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

func (x *CensorCommentRequest) GetStatus() CensorStatus {
	if x != nil {
		return x.Status
	}
	return CensorStatus_PENDING
}

func (x *CensorCommentRequest) GetStage() CensorStage {
	if x != nil {
		return x.Stage
	}
	return CensorStage_UNREVIEWED
}

func (x *CensorCommentRequest) GetCensorsum() string {
	if x != nil {
		return x.Censorsum
	}
	return ""
}

// 审核评论响应
type CensorCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Err     string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *CensorCommentResponse) Reset() {
	*x = CensorCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CensorCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CensorCommentResponse) ProtoMessage() {}

func (x *CensorCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CensorCommentResponse.ProtoReflect.Descriptor instead.
func (*CensorCommentResponse) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{13}
}

func (x *CensorCommentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CensorCommentResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

// 审核用户资料请求
type CensorUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string             `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`                        // 用户ID
	Stage     CensorStage        `protobuf:"varint,2,opt,name=stage,proto3,enum=censor.CensorStage" json:"stage,omitempty"` // 审核阶段
	Fields    []*UserFieldCensor `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`                        // 审核字段
	Censorsum string             `protobuf:"bytes,4,opt,name=censorsum,proto3" json:"censorsum,omitempty"`
}

func (x *CensorUserRequest) Reset() {
	*x = CensorUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CensorUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CensorUserRequest) ProtoMessage() {}

func (x *CensorUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CensorUserRequest.ProtoReflect.Descriptor instead.
func (*CensorUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{14}
}

func (x *CensorUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CensorUserRequest) GetStage() CensorStage {
	if x != nil {
		return x.Stage
	}
	return CensorStage_UNREVIEWED
}

func (x *CensorUserRequest) GetFields() []*UserFieldCensor {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *CensorUserRequest) GetCensorsum() string {
	if x != nil {
		return x.Censorsum
	}
	return ""
}

type UserFieldCensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status CensorStatus `protobuf:"varint,1,opt,name=status,proto3,enum=censor.CensorStatus" json:"status,omitempty"` // 审核状态
	Field  UserField    `protobuf:"varint,2,opt,name=field,proto3,enum=censor.UserField" json:"field,omitempty"`      // 审核字段
}

func (x *UserFieldCensor) Reset() {
	*x = UserFieldCensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFieldCensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFieldCensor) ProtoMessage() {}

func (x *UserFieldCensor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFieldCensor.ProtoReflect.Descriptor instead.
func (*UserFieldCensor) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{15}
}

func (x *UserFieldCensor) GetStatus() CensorStatus {
	if x != nil {
		return x.Status
	}
	return CensorStatus_PENDING
}

func (x *UserFieldCensor) GetField() UserField {
	if x != nil {
		return x.Field
	}
	return UserField_USER_FIELD_UNKNOWN
}

// 审核用户资料响应
type CensorUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Err     string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *CensorUserResponse) Reset() {
	*x = CensorUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CensorUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CensorUserResponse) ProtoMessage() {}

func (x *CensorUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CensorUserResponse.ProtoReflect.Descriptor instead.
func (*CensorUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{16}
}

func (x *CensorUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CensorUserResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type TopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicName string `protobuf:"bytes,1,opt,name=topicName,proto3" json:"topicName,omitempty"` // 话题
}

func (x *TopicRequest) Reset() {
	*x = TopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicRequest) ProtoMessage() {}

func (x *TopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicRequest.ProtoReflect.Descriptor instead.
func (*TopicRequest) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{17}
}

func (x *TopicRequest) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

type TopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicName    string            `protobuf:"bytes,1,opt,name=topicName,proto3" json:"topicName,omitempty"` // 话题ID
	Personable   bool              `protobuf:"varint,2,opt,name=personable,proto3" json:"personable,omitempty"`
	Categories   []UserTagCategory `protobuf:"varint,3,rep,packed,name=categories,proto3,enum=censor.UserTagCategory" json:"categories,omitempty"`
	CensorStatus CensorStatus      `protobuf:"varint,4,opt,name=censor_status,json=censorStatus,proto3,enum=censor.CensorStatus" json:"censor_status,omitempty"`
}

func (x *TopicResponse) Reset() {
	*x = TopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicResponse) ProtoMessage() {}

func (x *TopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicResponse.ProtoReflect.Descriptor instead.
func (*TopicResponse) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{18}
}

func (x *TopicResponse) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *TopicResponse) GetPersonable() bool {
	if x != nil {
		return x.Personable
	}
	return false
}

func (x *TopicResponse) GetCategories() []UserTagCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *TopicResponse) GetCensorStatus() CensorStatus {
	if x != nil {
		return x.CensorStatus
	}
	return CensorStatus_PENDING
}

type CensorTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicName string       `protobuf:"bytes,1,opt,name=topicName,proto3" json:"topicName,omitempty"`                     // 话题
	Status    CensorStatus `protobuf:"varint,2,opt,name=status,proto3,enum=censor.CensorStatus" json:"status,omitempty"` // 审核状态
	Stage     CensorStage  `protobuf:"varint,3,opt,name=stage,proto3,enum=censor.CensorStage" json:"stage,omitempty"`    // 审核阶段
}

func (x *CensorTopicRequest) Reset() {
	*x = CensorTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CensorTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CensorTopicRequest) ProtoMessage() {}

func (x *CensorTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CensorTopicRequest.ProtoReflect.Descriptor instead.
func (*CensorTopicRequest) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{19}
}

func (x *CensorTopicRequest) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *CensorTopicRequest) GetStatus() CensorStatus {
	if x != nil {
		return x.Status
	}
	return CensorStatus_PENDING
}

func (x *CensorTopicRequest) GetStage() CensorStage {
	if x != nil {
		return x.Stage
	}
	return CensorStage_UNREVIEWED
}

type CensorTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Err     string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *CensorTopicResponse) Reset() {
	*x = CensorTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CensorTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CensorTopicResponse) ProtoMessage() {}

func (x *CensorTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CensorTopicResponse.ProtoReflect.Descriptor instead.
func (*CensorTopicResponse) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{20}
}

func (x *CensorTopicResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CensorTopicResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type FeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedbackId string `protobuf:"bytes,1,opt,name=feedbackId,proto3" json:"feedbackId,omitempty"`
}

func (x *FeedbackRequest) Reset() {
	*x = FeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackRequest) ProtoMessage() {}

func (x *FeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackRequest.ProtoReflect.Descriptor instead.
func (*FeedbackRequest) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{21}
}

func (x *FeedbackRequest) GetFeedbackId() string {
	if x != nil {
		return x.FeedbackId
	}
	return ""
}

type FeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedbackId string                 `protobuf:"bytes,1,opt,name=feedbackId,proto3" json:"feedbackId,omitempty"`
	UserId     string                 `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Content    string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Images     []string               `protobuf:"bytes,4,rep,name=images,proto3" json:"images,omitempty"`
	Connection string                 `protobuf:"bytes,5,opt,name=connection,proto3" json:"connection,omitempty"`
	Category   FeedbackCategory       `protobuf:"varint,6,opt,name=category,proto3,enum=censor.FeedbackCategory" json:"category,omitempty"`
	Status     FeedbackStatus         `protobuf:"varint,7,opt,name=status,proto3,enum=censor.FeedbackStatus" json:"status,omitempty"` // 反馈的处理状态（如"received", "processing", "resolved", "dismissed"等）
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ResolvedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=resolved_at,json=resolvedAt,proto3" json:"resolved_at,omitempty"`
	Resolution string                 `protobuf:"bytes,10,opt,name=resolution,proto3" json:"resolution,omitempty"` // 处理结果的详细信息
	Response   string                 `protobuf:"bytes,11,opt,name=response,proto3" json:"response,omitempty"`     // 对用户反馈的回复内容
}

func (x *FeedbackResponse) Reset() {
	*x = FeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackResponse) ProtoMessage() {}

func (x *FeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackResponse.ProtoReflect.Descriptor instead.
func (*FeedbackResponse) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{22}
}

func (x *FeedbackResponse) GetFeedbackId() string {
	if x != nil {
		return x.FeedbackId
	}
	return ""
}

func (x *FeedbackResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FeedbackResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *FeedbackResponse) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *FeedbackResponse) GetConnection() string {
	if x != nil {
		return x.Connection
	}
	return ""
}

func (x *FeedbackResponse) GetCategory() FeedbackCategory {
	if x != nil {
		return x.Category
	}
	return FeedbackCategory_OTHER1
}

func (x *FeedbackResponse) GetStatus() FeedbackStatus {
	if x != nil {
		return x.Status
	}
	return FeedbackStatus_PROCESSING
}

func (x *FeedbackResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FeedbackResponse) GetResolvedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ResolvedAt
	}
	return nil
}

func (x *FeedbackResponse) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

func (x *FeedbackResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type CensorFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedbackId string           `protobuf:"bytes,1,opt,name=feedbackId,proto3" json:"feedbackId,omitempty"`
	Status     FeedbackCategory `protobuf:"varint,2,opt,name=status,proto3,enum=censor.FeedbackCategory" json:"status,omitempty"`
}

func (x *CensorFeedbackRequest) Reset() {
	*x = CensorFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CensorFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CensorFeedbackRequest) ProtoMessage() {}

func (x *CensorFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CensorFeedbackRequest.ProtoReflect.Descriptor instead.
func (*CensorFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{23}
}

func (x *CensorFeedbackRequest) GetFeedbackId() string {
	if x != nil {
		return x.FeedbackId
	}
	return ""
}

func (x *CensorFeedbackRequest) GetStatus() FeedbackCategory {
	if x != nil {
		return x.Status
	}
	return FeedbackCategory_OTHER1
}

type CensorFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Err     string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *CensorFeedbackResponse) Reset() {
	*x = CensorFeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CensorFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CensorFeedbackResponse) ProtoMessage() {}

func (x *CensorFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CensorFeedbackResponse.ProtoReflect.Descriptor instead.
func (*CensorFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{24}
}

func (x *CensorFeedbackResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CensorFeedbackResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type ComplaintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComplaintId string `protobuf:"bytes,1,opt,name=complaintId,proto3" json:"complaintId,omitempty"`
}

func (x *ComplaintRequest) Reset() {
	*x = ComplaintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplaintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplaintRequest) ProtoMessage() {}

func (x *ComplaintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplaintRequest.ProtoReflect.Descriptor instead.
func (*ComplaintRequest) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{25}
}

func (x *ComplaintRequest) GetComplaintId() string {
	if x != nil {
		return x.ComplaintId
	}
	return ""
}

type ComplaintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComplaintId   string                 `protobuf:"bytes,1,opt,name=complaintId,proto3" json:"complaintId,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	ContentId     string                 `protobuf:"bytes,3,opt,name=contentId,proto3" json:"contentId,omitempty"`
	ContentType   string                 `protobuf:"bytes,4,opt,name=contentType,proto3" json:"contentType,omitempty"`
	ComplaintType ComplaintType          `protobuf:"varint,5,opt,name=complaintType,proto3,enum=censor.ComplaintType" json:"complaintType,omitempty"`
	CensorStatus  CensorStatus           `protobuf:"varint,6,opt,name=censor_status,json=censorStatus,proto3,enum=censor.CensorStatus" json:"censor_status,omitempty"`
	Description   string                 `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ResolvedAt    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=resolved_at,json=resolvedAt,proto3" json:"resolved_at,omitempty"`
	Resolution    string                 `protobuf:"bytes,10,opt,name=resolution,proto3" json:"resolution,omitempty"`
}

func (x *ComplaintResponse) Reset() {
	*x = ComplaintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplaintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplaintResponse) ProtoMessage() {}

func (x *ComplaintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplaintResponse.ProtoReflect.Descriptor instead.
func (*ComplaintResponse) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{26}
}

func (x *ComplaintResponse) GetComplaintId() string {
	if x != nil {
		return x.ComplaintId
	}
	return ""
}

func (x *ComplaintResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ComplaintResponse) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

func (x *ComplaintResponse) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *ComplaintResponse) GetComplaintType() ComplaintType {
	if x != nil {
		return x.ComplaintType
	}
	return ComplaintType_OTHER2
}

func (x *ComplaintResponse) GetCensorStatus() CensorStatus {
	if x != nil {
		return x.CensorStatus
	}
	return CensorStatus_PENDING
}

func (x *ComplaintResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ComplaintResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ComplaintResponse) GetResolvedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ResolvedAt
	}
	return nil
}

func (x *ComplaintResponse) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

type CensorComplaintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComplaintId string       `protobuf:"bytes,1,opt,name=complaintId,proto3" json:"complaintId,omitempty"`
	Status      CensorStatus `protobuf:"varint,2,opt,name=status,proto3,enum=censor.CensorStatus" json:"status,omitempty"`
}

func (x *CensorComplaintRequest) Reset() {
	*x = CensorComplaintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CensorComplaintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CensorComplaintRequest) ProtoMessage() {}

func (x *CensorComplaintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CensorComplaintRequest.ProtoReflect.Descriptor instead.
func (*CensorComplaintRequest) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{27}
}

func (x *CensorComplaintRequest) GetComplaintId() string {
	if x != nil {
		return x.ComplaintId
	}
	return ""
}

func (x *CensorComplaintRequest) GetStatus() CensorStatus {
	if x != nil {
		return x.Status
	}
	return CensorStatus_PENDING
}

type CensorComplaintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Err     string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *CensorComplaintResponse) Reset() {
	*x = CensorComplaintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CensorComplaintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CensorComplaintResponse) ProtoMessage() {}

func (x *CensorComplaintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CensorComplaintResponse.ProtoReflect.Descriptor instead.
func (*CensorComplaintResponse) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{28}
}

func (x *CensorComplaintResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CensorComplaintResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type WithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithdrawId string `protobuf:"bytes,1,opt,name=WithdrawId,proto3" json:"WithdrawId,omitempty"`
}

func (x *WithdrawRequest) Reset() {
	*x = WithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawRequest) ProtoMessage() {}

func (x *WithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawRequest.ProtoReflect.Descriptor instead.
func (*WithdrawRequest) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{29}
}

func (x *WithdrawRequest) GetWithdrawId() string {
	if x != nil {
		return x.WithdrawId
	}
	return ""
}

type WithdrawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WithdrawResponse) Reset() {
	*x = WithdrawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawResponse) ProtoMessage() {}

func (x *WithdrawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawResponse.ProtoReflect.Descriptor instead.
func (*WithdrawResponse) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{30}
}

type CensorWithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithdrawId string       `protobuf:"bytes,1,opt,name=WithdrawId,proto3" json:"WithdrawId,omitempty"`
	Status     CensorStatus `protobuf:"varint,2,opt,name=status,proto3,enum=censor.CensorStatus" json:"status,omitempty"`
}

func (x *CensorWithdrawRequest) Reset() {
	*x = CensorWithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CensorWithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CensorWithdrawRequest) ProtoMessage() {}

func (x *CensorWithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CensorWithdrawRequest.ProtoReflect.Descriptor instead.
func (*CensorWithdrawRequest) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{31}
}

func (x *CensorWithdrawRequest) GetWithdrawId() string {
	if x != nil {
		return x.WithdrawId
	}
	return ""
}

func (x *CensorWithdrawRequest) GetStatus() CensorStatus {
	if x != nil {
		return x.Status
	}
	return CensorStatus_PENDING
}

type CensorWithdrawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Err     string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *CensorWithdrawResponse) Reset() {
	*x = CensorWithdrawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CensorWithdrawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CensorWithdrawResponse) ProtoMessage() {}

func (x *CensorWithdrawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CensorWithdrawResponse.ProtoReflect.Descriptor instead.
func (*CensorWithdrawResponse) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{32}
}

func (x *CensorWithdrawResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CensorWithdrawResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type TransactionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *TransactionListRequest) Reset() {
	*x = TransactionListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionListRequest) ProtoMessage() {}

func (x *TransactionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionListRequest.ProtoReflect.Descriptor instead.
func (*TransactionListRequest) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{33}
}

func (x *TransactionListRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type TransactionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransactionListResponse) Reset() {
	*x = TransactionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionListResponse) ProtoMessage() {}

func (x *TransactionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionListResponse.ProtoReflect.Descriptor instead.
func (*TransactionListResponse) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{34}
}

type BanUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`                  // 用户ID
	Reason    string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`                  // 封禁原因
	Permanent bool   `protobuf:"varint,3,opt,name=permanent,proto3" json:"permanent,omitempty"`           // 是否永久封禁
	BanTime   string `protobuf:"bytes,4,opt,name=ban_time,json=banTime,proto3" json:"ban_time,omitempty"` // 封禁时间
	EndTime   string `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"` // 解封时间
}

func (x *BanUserRequest) Reset() {
	*x = BanUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanUserRequest) ProtoMessage() {}

func (x *BanUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanUserRequest.ProtoReflect.Descriptor instead.
func (*BanUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{35}
}

func (x *BanUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BanUserRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *BanUserRequest) GetPermanent() bool {
	if x != nil {
		return x.Permanent
	}
	return false
}

func (x *BanUserRequest) GetBanTime() string {
	if x != nil {
		return x.BanTime
	}
	return ""
}

func (x *BanUserRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type BanUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 是否成功
	Err     string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`          // 错误信息
}

func (x *BanUserResponse) Reset() {
	*x = BanUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanUserResponse) ProtoMessage() {}

func (x *BanUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanUserResponse.ProtoReflect.Descriptor instead.
func (*BanUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{36}
}

func (x *BanUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BanUserResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type UnbanUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"` // 用户ID
}

func (x *UnbanUserRequest) Reset() {
	*x = UnbanUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbanUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbanUserRequest) ProtoMessage() {}

func (x *UnbanUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbanUserRequest.ProtoReflect.Descriptor instead.
func (*UnbanUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{37}
}

func (x *UnbanUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UnbanUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 是否成功
	Err     string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`          // 错误信息
}

func (x *UnbanUserResponse) Reset() {
	*x = UnbanUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_admin_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbanUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbanUserResponse) ProtoMessage() {}

func (x *UnbanUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_admin_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbanUserResponse.ProtoReflect.Descriptor instead.
func (*UnbanUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_admin_proto_rawDescGZIP(), []int{38}
}

func (x *UnbanUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UnbanUserResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

var File_proto_admin_proto protoreflect.FileDescriptor

var file_proto_admin_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a, 0x0a,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x25, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x0c, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x25, 0x0a, 0x0b, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xb1, 0x08, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x6e,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x63,
	0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x49, 0x64, 0x4c, 0x63, 0x61, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x61,
	0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x73, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x41, 0x0a, 0x0e, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x63,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x73, 0x75, 0x6d, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x73, 0x75, 0x6d, 0x22, 0x28, 0x0a, 0x0c, 0x59, 0x75, 0x74, 0x61, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x79, 0x75, 0x74, 0x61, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x79, 0x75, 0x74, 0x61, 0x70, 0x49, 0x64, 0x22, 0xa3,
	0x06, 0x0a, 0x0d, 0x59, 0x75, 0x74, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x79, 0x75, 0x74, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x79, 0x75, 0x74, 0x61, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x41, 0x6e, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x6e, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x6f, 0x6e, 0x5f,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e,
	0x6f, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0d, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x63, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x73, 0x75, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x73, 0x75, 0x6d, 0x22, 0x2e, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0xae, 0x05, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x79, 0x75, 0x74, 0x61, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x79, 0x75, 0x74, 0x61, 0x70,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x41, 0x6e, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x6e, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x6f,
	0x6e, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x6e, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0c, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x73, 0x75, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x73, 0x75, 0x6d, 0x22, 0xc7, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x59, 0x65, 0x61, 0x72, 0x22,
	0xa5, 0x01, 0x0a, 0x12, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x59, 0x75, 0x74, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x79, 0x75, 0x74, 0x61, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x79, 0x75, 0x74, 0x61, 0x70, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x73, 0x75, 0x6d, 0x22, 0x41, 0x0a, 0x13, 0x43, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x59, 0x75, 0x74, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xab, 0x01, 0x0a, 0x14, 0x43,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x75, 0x6d, 0x22, 0x43, 0x0a, 0x15, 0x43, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xa5, 0x01,
	0x0a, 0x11, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x73, 0x75, 0x6d, 0x22, 0x68, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22,
	0x40, 0x0a, 0x12, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72,
	0x72, 0x22, 0x2c, 0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xc1, 0x01, 0x0a, 0x0d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x37, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x61, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x12, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x22, 0x41, 0x0a, 0x13, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x65, 0x72, 0x72, 0x22, 0x31, 0x0a, 0x0f, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x22, 0xb6, 0x03, 0x0a, 0x10, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x69, 0x0a, 0x15, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x44, 0x0a, 0x16, 0x43,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72,
	0x72, 0x22, 0x34, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xbf, 0x03, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0c, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x16, 0x43, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x45, 0x0a, 0x17, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x31, 0x0a, 0x0f, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x64, 0x22, 0x12, 0x0a,
	0x10, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x65, 0x0a, 0x15, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x44, 0x0a, 0x16, 0x43, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x30,
	0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x19, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x0e,
	0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72,
	0x72, 0x22, 0x2a, 0x0a, 0x10, 0x55, 0x6e, 0x62, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3f, 0x0a,
	0x11, 0x55, 0x6e, 0x62, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x2a, 0x44,
	0x0a, 0x0b, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a,
	0x0a, 0x55, 0x4e, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x55,
	0x4d, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41,
	0x52, 0x59, 0x10, 0x03, 0x2a, 0x44, 0x0a, 0x0c, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x46, 0x4c, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x36, 0x0a, 0x06, 0x47, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x03, 0x2a, 0xcc, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x10, 0x03, 0x12, 0x18, 0x0a,
	0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x4c,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x56, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05,
	0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e,
	0x49, 0x43, 0x4b, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4c, 0x54, 0x10,
	0x07, 0x2a, 0x56, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x43,
	0x48, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x56,
	0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x2a, 0x46, 0x0a, 0x10, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0a, 0x0a,
	0x06, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x31, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x47,
	0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x41, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x47, 0x10,
	0x03, 0x2a, 0x4b, 0x0a, 0x0e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x49, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x90,
	0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x32, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x50, 0x41, 0x4d, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x42, 0x55, 0x53, 0x45, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x49,
	0x4e, 0x46, 0x52, 0x49, 0x4e, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x09, 0x0a,
	0x05, 0x43, 0x52, 0x49, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x4e, 0x53,
	0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x53, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x44, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x10,
	0x0a, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x06, 0x0a, 0x02,
	0x41, 0x49, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x42, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x48, 0x49, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x0e,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x0f, 0x12, 0x0e,
	0x0a, 0x0a, 0x55, 0x4e, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x4c, 0x59, 0x10, 0x10, 0x12, 0x0c,
	0x0a, 0x08, 0x49, 0x4e, 0x44, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08,
	0x56, 0x49, 0x4f, 0x4c, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x12, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x49, 0x43, 0x49, 0x44, 0x45, 0x10, 0x13, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x41, 0x54, 0x45, 0x10,
	0x14, 0x32, 0xcd, 0x09, 0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x47, 0x72, 0x70, 0x63, 0x12, 0x13,
	0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x13, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05,
	0x59, 0x75, 0x74, 0x61, 0x70, 0x12, 0x14, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x59,
	0x75, 0x74, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x59, 0x75, 0x74, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x2e,
	0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x14, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x59, 0x75,
	0x74, 0x61, 0x70, 0x12, 0x1a, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x59, 0x75, 0x74, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x59,
	0x75, 0x74, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d,
	0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e,
	0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x43, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x0b, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1a,
	0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1d, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x43, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x63,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x0a, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x17, 0x2e, 0x63, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52,
	0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x1d, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16,
	0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e,
	0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x09, 0x55, 0x6e, 0x62, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x63,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x55, 0x6e, 0x62, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e,
	0x55, 0x6e, 0x62, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_admin_proto_rawDescOnce sync.Once
	file_proto_admin_proto_rawDescData = file_proto_admin_proto_rawDesc
)

func file_proto_admin_proto_rawDescGZIP() []byte {
	file_proto_admin_proto_rawDescOnce.Do(func() {
		file_proto_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_admin_proto_rawDescData)
	})
	return file_proto_admin_proto_rawDescData
}

var file_proto_admin_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_proto_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_proto_admin_proto_goTypes = []interface{}{
	(CensorStage)(0),                // 0: censor.CensorStage
	(CensorStatus)(0),               // 1: censor.CensorStatus
	(Gender)(0),                     // 2: censor.Gender
	(UserField)(0),                  // 3: censor.UserField
	(UserTagCategory)(0),            // 4: censor.UserTagCategory
	(FeedbackCategory)(0),           // 5: censor.FeedbackCategory
	(FeedbackStatus)(0),             // 6: censor.FeedbackStatus
	(ComplaintType)(0),              // 7: censor.ComplaintType
	(*TargetItem)(nil),              // 8: censor.TargetItem
	(*TestRequest)(nil),             // 9: censor.TestRequest
	(*TestResponse)(nil),            // 10: censor.TestResponse
	(*UserRequest)(nil),             // 11: censor.UserRequest
	(*UserResponse)(nil),            // 12: censor.UserResponse
	(*YutapRequest)(nil),            // 13: censor.YutapRequest
	(*YutapResponse)(nil),           // 14: censor.YutapResponse
	(*CommentRequest)(nil),          // 15: censor.CommentRequest
	(*CommentResponse)(nil),         // 16: censor.CommentResponse
	(*UserModification)(nil),        // 17: censor.UserModification
	(*CensorYutapRequest)(nil),      // 18: censor.CensorYutapRequest
	(*CensorYutapResponse)(nil),     // 19: censor.CensorYutapResponse
	(*CensorCommentRequest)(nil),    // 20: censor.CensorCommentRequest
	(*CensorCommentResponse)(nil),   // 21: censor.CensorCommentResponse
	(*CensorUserRequest)(nil),       // 22: censor.CensorUserRequest
	(*UserFieldCensor)(nil),         // 23: censor.UserFieldCensor
	(*CensorUserResponse)(nil),      // 24: censor.CensorUserResponse
	(*TopicRequest)(nil),            // 25: censor.TopicRequest
	(*TopicResponse)(nil),           // 26: censor.TopicResponse
	(*CensorTopicRequest)(nil),      // 27: censor.CensorTopicRequest
	(*CensorTopicResponse)(nil),     // 28: censor.CensorTopicResponse
	(*FeedbackRequest)(nil),         // 29: censor.FeedbackRequest
	(*FeedbackResponse)(nil),        // 30: censor.FeedbackResponse
	(*CensorFeedbackRequest)(nil),   // 31: censor.CensorFeedbackRequest
	(*CensorFeedbackResponse)(nil),  // 32: censor.CensorFeedbackResponse
	(*ComplaintRequest)(nil),        // 33: censor.ComplaintRequest
	(*ComplaintResponse)(nil),       // 34: censor.ComplaintResponse
	(*CensorComplaintRequest)(nil),  // 35: censor.CensorComplaintRequest
	(*CensorComplaintResponse)(nil), // 36: censor.CensorComplaintResponse
	(*WithdrawRequest)(nil),         // 37: censor.WithdrawRequest
	(*WithdrawResponse)(nil),        // 38: censor.WithdrawResponse
	(*CensorWithdrawRequest)(nil),   // 39: censor.CensorWithdrawRequest
	(*CensorWithdrawResponse)(nil),  // 40: censor.CensorWithdrawResponse
	(*TransactionListRequest)(nil),  // 41: censor.TransactionListRequest
	(*TransactionListResponse)(nil), // 42: censor.TransactionListResponse
	(*BanUserRequest)(nil),          // 43: censor.BanUserRequest
	(*BanUserResponse)(nil),         // 44: censor.BanUserResponse
	(*UnbanUserRequest)(nil),        // 45: censor.UnbanUserRequest
	(*UnbanUserResponse)(nil),       // 46: censor.UnbanUserResponse
	(*timestamppb.Timestamp)(nil),   // 47: google.protobuf.Timestamp
}
var file_proto_admin_proto_depIdxs = []int32{
	47, // 0: censor.UserResponse.custom_id_time:type_name -> google.protobuf.Timestamp
	2,  // 1: censor.UserResponse.gender:type_name -> censor.Gender
	47, // 2: censor.UserResponse.last_login_time:type_name -> google.protobuf.Timestamp
	47, // 3: censor.UserResponse.deactivated_at:type_name -> google.protobuf.Timestamp
	1,  // 4: censor.UserResponse.censor_status:type_name -> censor.CensorStatus
	47, // 5: censor.YutapResponse.created_at:type_name -> google.protobuf.Timestamp
	47, // 6: censor.YutapResponse.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 7: censor.YutapResponse.censor_status:type_name -> censor.CensorStatus
	8,  // 8: censor.YutapResponse.targets:type_name -> censor.TargetItem
	47, // 9: censor.YutapResponse.deleted_at:type_name -> google.protobuf.Timestamp
	47, // 10: censor.CommentResponse.created_at:type_name -> google.protobuf.Timestamp
	1,  // 11: censor.CommentResponse.censor_status:type_name -> censor.CensorStatus
	47, // 12: censor.CommentResponse.deleted_at:type_name -> google.protobuf.Timestamp
	2,  // 13: censor.UserModification.gender:type_name -> censor.Gender
	1,  // 14: censor.CensorYutapRequest.status:type_name -> censor.CensorStatus
	0,  // 15: censor.CensorYutapRequest.stage:type_name -> censor.CensorStage
	1,  // 16: censor.CensorCommentRequest.status:type_name -> censor.CensorStatus
	0,  // 17: censor.CensorCommentRequest.stage:type_name -> censor.CensorStage
	0,  // 18: censor.CensorUserRequest.stage:type_name -> censor.CensorStage
	23, // 19: censor.CensorUserRequest.fields:type_name -> censor.UserFieldCensor
	1,  // 20: censor.UserFieldCensor.status:type_name -> censor.CensorStatus
	3,  // 21: censor.UserFieldCensor.field:type_name -> censor.UserField
	4,  // 22: censor.TopicResponse.categories:type_name -> censor.UserTagCategory
	1,  // 23: censor.TopicResponse.censor_status:type_name -> censor.CensorStatus
	1,  // 24: censor.CensorTopicRequest.status:type_name -> censor.CensorStatus
	0,  // 25: censor.CensorTopicRequest.stage:type_name -> censor.CensorStage
	5,  // 26: censor.FeedbackResponse.category:type_name -> censor.FeedbackCategory
	6,  // 27: censor.FeedbackResponse.status:type_name -> censor.FeedbackStatus
	47, // 28: censor.FeedbackResponse.created_at:type_name -> google.protobuf.Timestamp
	47, // 29: censor.FeedbackResponse.resolved_at:type_name -> google.protobuf.Timestamp
	5,  // 30: censor.CensorFeedbackRequest.status:type_name -> censor.FeedbackCategory
	7,  // 31: censor.ComplaintResponse.complaintType:type_name -> censor.ComplaintType
	1,  // 32: censor.ComplaintResponse.censor_status:type_name -> censor.CensorStatus
	47, // 33: censor.ComplaintResponse.created_at:type_name -> google.protobuf.Timestamp
	47, // 34: censor.ComplaintResponse.resolved_at:type_name -> google.protobuf.Timestamp
	1,  // 35: censor.CensorComplaintRequest.status:type_name -> censor.CensorStatus
	1,  // 36: censor.CensorWithdrawRequest.status:type_name -> censor.CensorStatus
	9,  // 37: censor.AdminService.TestGrpc:input_type -> censor.TestRequest
	11, // 38: censor.AdminService.User:input_type -> censor.UserRequest
	13, // 39: censor.AdminService.Yutap:input_type -> censor.YutapRequest
	15, // 40: censor.AdminService.Comment:input_type -> censor.CommentRequest
	25, // 41: censor.AdminService.Topic:input_type -> censor.TopicRequest
	18, // 42: censor.AdminService.CensorYutap:input_type -> censor.CensorYutapRequest
	20, // 43: censor.AdminService.CensorComment:input_type -> censor.CensorCommentRequest
	22, // 44: censor.AdminService.CensorUser:input_type -> censor.CensorUserRequest
	27, // 45: censor.AdminService.CensorTopic:input_type -> censor.CensorTopicRequest
	29, // 46: censor.AdminService.Feedback:input_type -> censor.FeedbackRequest
	31, // 47: censor.AdminService.CensorFeedback:input_type -> censor.CensorFeedbackRequest
	33, // 48: censor.AdminService.Complaint:input_type -> censor.ComplaintRequest
	35, // 49: censor.AdminService.CensorComplaint:input_type -> censor.CensorComplaintRequest
	37, // 50: censor.AdminService.Withdrawal:input_type -> censor.WithdrawRequest
	41, // 51: censor.AdminService.TransactionList:input_type -> censor.TransactionListRequest
	39, // 52: censor.AdminService.CensorWithdraw:input_type -> censor.CensorWithdrawRequest
	43, // 53: censor.AdminService.BanUser:input_type -> censor.BanUserRequest
	45, // 54: censor.AdminService.UnbanUser:input_type -> censor.UnbanUserRequest
	10, // 55: censor.AdminService.TestGrpc:output_type -> censor.TestResponse
	12, // 56: censor.AdminService.User:output_type -> censor.UserResponse
	14, // 57: censor.AdminService.Yutap:output_type -> censor.YutapResponse
	16, // 58: censor.AdminService.Comment:output_type -> censor.CommentResponse
	26, // 59: censor.AdminService.Topic:output_type -> censor.TopicResponse
	19, // 60: censor.AdminService.CensorYutap:output_type -> censor.CensorYutapResponse
	21, // 61: censor.AdminService.CensorComment:output_type -> censor.CensorCommentResponse
	24, // 62: censor.AdminService.CensorUser:output_type -> censor.CensorUserResponse
	28, // 63: censor.AdminService.CensorTopic:output_type -> censor.CensorTopicResponse
	30, // 64: censor.AdminService.Feedback:output_type -> censor.FeedbackResponse
	32, // 65: censor.AdminService.CensorFeedback:output_type -> censor.CensorFeedbackResponse
	34, // 66: censor.AdminService.Complaint:output_type -> censor.ComplaintResponse
	36, // 67: censor.AdminService.CensorComplaint:output_type -> censor.CensorComplaintResponse
	38, // 68: censor.AdminService.Withdrawal:output_type -> censor.WithdrawResponse
	42, // 69: censor.AdminService.TransactionList:output_type -> censor.TransactionListResponse
	40, // 70: censor.AdminService.CensorWithdraw:output_type -> censor.CensorWithdrawResponse
	44, // 71: censor.AdminService.BanUser:output_type -> censor.BanUserResponse
	46, // 72: censor.AdminService.UnbanUser:output_type -> censor.UnbanUserResponse
	55, // [55:73] is the sub-list for method output_type
	37, // [37:55] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_proto_admin_proto_init() }
func file_proto_admin_proto_init() {
	if File_proto_admin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YutapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YutapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserModification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CensorYutapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CensorYutapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CensorCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CensorCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CensorUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFieldCensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CensorUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CensorTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CensorTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CensorFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CensorFeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplaintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplaintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CensorComplaintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CensorComplaintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CensorWithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CensorWithdrawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbanUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_admin_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbanUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_admin_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_admin_proto_goTypes,
		DependencyIndexes: file_proto_admin_proto_depIdxs,
		EnumInfos:         file_proto_admin_proto_enumTypes,
		MessageInfos:      file_proto_admin_proto_msgTypes,
	}.Build()
	File_proto_admin_proto = out.File
	file_proto_admin_proto_rawDesc = nil
	file_proto_admin_proto_goTypes = nil
	file_proto_admin_proto_depIdxs = nil
}
