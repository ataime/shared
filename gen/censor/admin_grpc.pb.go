// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: proto/admin.proto

// 在protobuf/pbadmin目录:
// protoc --go_out=. --go-grpc_out=. censor.proto
// protoc --go_out=. --go-grpc_out=. *.proto

package censor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AdminService_TestGrpc_FullMethodName        = "/censor.AdminService/TestGrpc"
	AdminService_User_FullMethodName            = "/censor.AdminService/User"
	AdminService_Yutap_FullMethodName           = "/censor.AdminService/Yutap"
	AdminService_Comment_FullMethodName         = "/censor.AdminService/Comment"
	AdminService_Topic_FullMethodName           = "/censor.AdminService/Topic"
	AdminService_CensorYutap_FullMethodName     = "/censor.AdminService/CensorYutap"
	AdminService_CensorComment_FullMethodName   = "/censor.AdminService/CensorComment"
	AdminService_CensorUser_FullMethodName      = "/censor.AdminService/CensorUser"
	AdminService_CensorTopic_FullMethodName     = "/censor.AdminService/CensorTopic"
	AdminService_Feedback_FullMethodName        = "/censor.AdminService/Feedback"
	AdminService_CensorFeedback_FullMethodName  = "/censor.AdminService/CensorFeedback"
	AdminService_Complaint_FullMethodName       = "/censor.AdminService/Complaint"
	AdminService_CensorComplaint_FullMethodName = "/censor.AdminService/CensorComplaint"
	AdminService_Withdrawal_FullMethodName      = "/censor.AdminService/Withdrawal"
	AdminService_TransactionList_FullMethodName = "/censor.AdminService/TransactionList"
	AdminService_CensorWithdraw_FullMethodName  = "/censor.AdminService/CensorWithdraw"
	AdminService_BanUser_FullMethodName         = "/censor.AdminService/BanUser"
	AdminService_UnbanUser_FullMethodName       = "/censor.AdminService/UnbanUser"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	TestGrpc(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	User(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	Yutap(ctx context.Context, in *YutapRequest, opts ...grpc.CallOption) (*YutapResponse, error)
	Comment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error)
	Topic(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error)
	// 审核语贴内容
	CensorYutap(ctx context.Context, in *CensorYutapRequest, opts ...grpc.CallOption) (*CensorYutapResponse, error)
	// 审核评论内容
	CensorComment(ctx context.Context, in *CensorCommentRequest, opts ...grpc.CallOption) (*CensorCommentResponse, error)
	// 审核用户资料
	CensorUser(ctx context.Context, in *CensorUserRequest, opts ...grpc.CallOption) (*CensorUserResponse, error)
	// 审核话题
	CensorTopic(ctx context.Context, in *CensorTopicRequest, opts ...grpc.CallOption) (*CensorTopicResponse, error)
	// 反馈意见获取
	Feedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error)
	// 反馈意见处理 (发送通知)
	CensorFeedback(ctx context.Context, in *CensorFeedbackRequest, opts ...grpc.CallOption) (*CensorFeedbackResponse, error)
	// 举报信息获取
	Complaint(ctx context.Context, in *ComplaintRequest, opts ...grpc.CallOption) (*ComplaintResponse, error)
	// 举报信息处理 (发送通知)
	CensorComplaint(ctx context.Context, in *CensorComplaintRequest, opts ...grpc.CallOption) (*CensorComplaintResponse, error)
	// 提现申请
	Withdrawal(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	// 交易列表(提现参考详情)
	TransactionList(ctx context.Context, in *TransactionListRequest, opts ...grpc.CallOption) (*TransactionListResponse, error)
	// 提现申请处理
	CensorWithdraw(ctx context.Context, in *CensorWithdrawRequest, opts ...grpc.CallOption) (*CensorWithdrawResponse, error)
	// 封禁用户
	BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*BanUserResponse, error)
	// 解封用户
	UnbanUser(ctx context.Context, in *UnbanUserRequest, opts ...grpc.CallOption) (*UnbanUserResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) TestGrpc(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, AdminService_TestGrpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) User(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, AdminService_User_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Yutap(ctx context.Context, in *YutapRequest, opts ...grpc.CallOption) (*YutapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(YutapResponse)
	err := c.cc.Invoke(ctx, AdminService_Yutap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Comment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, AdminService_Comment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Topic(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, AdminService_Topic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CensorYutap(ctx context.Context, in *CensorYutapRequest, opts ...grpc.CallOption) (*CensorYutapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CensorYutapResponse)
	err := c.cc.Invoke(ctx, AdminService_CensorYutap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CensorComment(ctx context.Context, in *CensorCommentRequest, opts ...grpc.CallOption) (*CensorCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CensorCommentResponse)
	err := c.cc.Invoke(ctx, AdminService_CensorComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CensorUser(ctx context.Context, in *CensorUserRequest, opts ...grpc.CallOption) (*CensorUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CensorUserResponse)
	err := c.cc.Invoke(ctx, AdminService_CensorUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CensorTopic(ctx context.Context, in *CensorTopicRequest, opts ...grpc.CallOption) (*CensorTopicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CensorTopicResponse)
	err := c.cc.Invoke(ctx, AdminService_CensorTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Feedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedbackResponse)
	err := c.cc.Invoke(ctx, AdminService_Feedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CensorFeedback(ctx context.Context, in *CensorFeedbackRequest, opts ...grpc.CallOption) (*CensorFeedbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CensorFeedbackResponse)
	err := c.cc.Invoke(ctx, AdminService_CensorFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Complaint(ctx context.Context, in *ComplaintRequest, opts ...grpc.CallOption) (*ComplaintResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComplaintResponse)
	err := c.cc.Invoke(ctx, AdminService_Complaint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CensorComplaint(ctx context.Context, in *CensorComplaintRequest, opts ...grpc.CallOption) (*CensorComplaintResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CensorComplaintResponse)
	err := c.cc.Invoke(ctx, AdminService_CensorComplaint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Withdrawal(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, AdminService_Withdrawal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) TransactionList(ctx context.Context, in *TransactionListRequest, opts ...grpc.CallOption) (*TransactionListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionListResponse)
	err := c.cc.Invoke(ctx, AdminService_TransactionList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CensorWithdraw(ctx context.Context, in *CensorWithdrawRequest, opts ...grpc.CallOption) (*CensorWithdrawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CensorWithdrawResponse)
	err := c.cc.Invoke(ctx, AdminService_CensorWithdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*BanUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BanUserResponse)
	err := c.cc.Invoke(ctx, AdminService_BanUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UnbanUser(ctx context.Context, in *UnbanUserRequest, opts ...grpc.CallOption) (*UnbanUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnbanUserResponse)
	err := c.cc.Invoke(ctx, AdminService_UnbanUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	TestGrpc(context.Context, *TestRequest) (*TestResponse, error)
	User(context.Context, *UserRequest) (*UserResponse, error)
	Yutap(context.Context, *YutapRequest) (*YutapResponse, error)
	Comment(context.Context, *CommentRequest) (*CommentResponse, error)
	Topic(context.Context, *TopicRequest) (*TopicResponse, error)
	// 审核语贴内容
	CensorYutap(context.Context, *CensorYutapRequest) (*CensorYutapResponse, error)
	// 审核评论内容
	CensorComment(context.Context, *CensorCommentRequest) (*CensorCommentResponse, error)
	// 审核用户资料
	CensorUser(context.Context, *CensorUserRequest) (*CensorUserResponse, error)
	// 审核话题
	CensorTopic(context.Context, *CensorTopicRequest) (*CensorTopicResponse, error)
	// 反馈意见获取
	Feedback(context.Context, *FeedbackRequest) (*FeedbackResponse, error)
	// 反馈意见处理 (发送通知)
	CensorFeedback(context.Context, *CensorFeedbackRequest) (*CensorFeedbackResponse, error)
	// 举报信息获取
	Complaint(context.Context, *ComplaintRequest) (*ComplaintResponse, error)
	// 举报信息处理 (发送通知)
	CensorComplaint(context.Context, *CensorComplaintRequest) (*CensorComplaintResponse, error)
	// 提现申请
	Withdrawal(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	// 交易列表(提现参考详情)
	TransactionList(context.Context, *TransactionListRequest) (*TransactionListResponse, error)
	// 提现申请处理
	CensorWithdraw(context.Context, *CensorWithdrawRequest) (*CensorWithdrawResponse, error)
	// 封禁用户
	BanUser(context.Context, *BanUserRequest) (*BanUserResponse, error)
	// 解封用户
	UnbanUser(context.Context, *UnbanUserRequest) (*UnbanUserResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) TestGrpc(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestGrpc not implemented")
}
func (UnimplementedAdminServiceServer) User(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method User not implemented")
}
func (UnimplementedAdminServiceServer) Yutap(context.Context, *YutapRequest) (*YutapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Yutap not implemented")
}
func (UnimplementedAdminServiceServer) Comment(context.Context, *CommentRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Comment not implemented")
}
func (UnimplementedAdminServiceServer) Topic(context.Context, *TopicRequest) (*TopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Topic not implemented")
}
func (UnimplementedAdminServiceServer) CensorYutap(context.Context, *CensorYutapRequest) (*CensorYutapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CensorYutap not implemented")
}
func (UnimplementedAdminServiceServer) CensorComment(context.Context, *CensorCommentRequest) (*CensorCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CensorComment not implemented")
}
func (UnimplementedAdminServiceServer) CensorUser(context.Context, *CensorUserRequest) (*CensorUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CensorUser not implemented")
}
func (UnimplementedAdminServiceServer) CensorTopic(context.Context, *CensorTopicRequest) (*CensorTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CensorTopic not implemented")
}
func (UnimplementedAdminServiceServer) Feedback(context.Context, *FeedbackRequest) (*FeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feedback not implemented")
}
func (UnimplementedAdminServiceServer) CensorFeedback(context.Context, *CensorFeedbackRequest) (*CensorFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CensorFeedback not implemented")
}
func (UnimplementedAdminServiceServer) Complaint(context.Context, *ComplaintRequest) (*ComplaintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complaint not implemented")
}
func (UnimplementedAdminServiceServer) CensorComplaint(context.Context, *CensorComplaintRequest) (*CensorComplaintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CensorComplaint not implemented")
}
func (UnimplementedAdminServiceServer) Withdrawal(context.Context, *WithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdrawal not implemented")
}
func (UnimplementedAdminServiceServer) TransactionList(context.Context, *TransactionListRequest) (*TransactionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionList not implemented")
}
func (UnimplementedAdminServiceServer) CensorWithdraw(context.Context, *CensorWithdrawRequest) (*CensorWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CensorWithdraw not implemented")
}
func (UnimplementedAdminServiceServer) BanUser(context.Context, *BanUserRequest) (*BanUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanUser not implemented")
}
func (UnimplementedAdminServiceServer) UnbanUser(context.Context, *UnbanUserRequest) (*UnbanUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbanUser not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_TestGrpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).TestGrpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_TestGrpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).TestGrpc(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_User_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).User(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Yutap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YutapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Yutap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Yutap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Yutap(ctx, req.(*YutapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Comment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Comment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Comment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Comment(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Topic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Topic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Topic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Topic(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CensorYutap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CensorYutapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CensorYutap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CensorYutap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CensorYutap(ctx, req.(*CensorYutapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CensorComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CensorCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CensorComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CensorComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CensorComment(ctx, req.(*CensorCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CensorUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CensorUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CensorUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CensorUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CensorUser(ctx, req.(*CensorUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CensorTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CensorTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CensorTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CensorTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CensorTopic(ctx, req.(*CensorTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Feedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Feedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Feedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Feedback(ctx, req.(*FeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CensorFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CensorFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CensorFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CensorFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CensorFeedback(ctx, req.(*CensorFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Complaint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplaintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Complaint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Complaint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Complaint(ctx, req.(*ComplaintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CensorComplaint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CensorComplaintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CensorComplaint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CensorComplaint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CensorComplaint(ctx, req.(*CensorComplaintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Withdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Withdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Withdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Withdrawal(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_TransactionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).TransactionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_TransactionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).TransactionList(ctx, req.(*TransactionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CensorWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CensorWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CensorWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CensorWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CensorWithdraw(ctx, req.(*CensorWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_BanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).BanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_BanUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).BanUser(ctx, req.(*BanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UnbanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UnbanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UnbanUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UnbanUser(ctx, req.(*UnbanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "censor.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestGrpc",
			Handler:    _AdminService_TestGrpc_Handler,
		},
		{
			MethodName: "User",
			Handler:    _AdminService_User_Handler,
		},
		{
			MethodName: "Yutap",
			Handler:    _AdminService_Yutap_Handler,
		},
		{
			MethodName: "Comment",
			Handler:    _AdminService_Comment_Handler,
		},
		{
			MethodName: "Topic",
			Handler:    _AdminService_Topic_Handler,
		},
		{
			MethodName: "CensorYutap",
			Handler:    _AdminService_CensorYutap_Handler,
		},
		{
			MethodName: "CensorComment",
			Handler:    _AdminService_CensorComment_Handler,
		},
		{
			MethodName: "CensorUser",
			Handler:    _AdminService_CensorUser_Handler,
		},
		{
			MethodName: "CensorTopic",
			Handler:    _AdminService_CensorTopic_Handler,
		},
		{
			MethodName: "Feedback",
			Handler:    _AdminService_Feedback_Handler,
		},
		{
			MethodName: "CensorFeedback",
			Handler:    _AdminService_CensorFeedback_Handler,
		},
		{
			MethodName: "Complaint",
			Handler:    _AdminService_Complaint_Handler,
		},
		{
			MethodName: "CensorComplaint",
			Handler:    _AdminService_CensorComplaint_Handler,
		},
		{
			MethodName: "Withdrawal",
			Handler:    _AdminService_Withdrawal_Handler,
		},
		{
			MethodName: "TransactionList",
			Handler:    _AdminService_TransactionList_Handler,
		},
		{
			MethodName: "CensorWithdraw",
			Handler:    _AdminService_CensorWithdraw_Handler,
		},
		{
			MethodName: "BanUser",
			Handler:    _AdminService_BanUser_Handler,
		},
		{
			MethodName: "UnbanUser",
			Handler:    _AdminService_UnbanUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/admin.proto",
}
